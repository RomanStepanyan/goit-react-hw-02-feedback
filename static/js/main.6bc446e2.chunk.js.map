{"version":3,"sources":["components/statistics/statistics.module.css","components/section/section.js","components/feedback/feedbackButtons.js","components/notification/notification.js","components/statistics/statistics.js","data/feedbackOptions.js","App.js","reportWebVitals.js","index.js","App.module.css"],"names":["module","exports","Section","title","children","OneButton","feedback","onLeaveFeedback","type","data-feedback","onClick","FeedbackButtons","options","map","option","Notification","message","FeedbackStatistics","good","neutral","bad","countTotalFeedback","countPositiveFeedbackPercentage","className","s","good_value","neutral_value","bad_value","total","total_value","positive","positive_value","FEEDBACK_OPTIONS","App","state","handleFeedback","target","dataset","setState","prevState","Math","round","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bc446e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"good\":\"statistics_good__1pYzx\",\"neutral\":\"statistics_neutral__2aKo-\",\"bad\":\"statistics_bad__2AI1M\",\"total\":\"statistics_total__1Q2zS\",\"positive\":\"statistics_positive__36jv4\"};","import PropTypes from 'prop-types';\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n// import s from './feedbackButtons.module.css';\n\nconst OneButton = ({ feedback, onLeaveFeedback }) => {\n  return (\n    <button type=\"button\" data-feedback={feedback} onClick={onLeaveFeedback}>\n      {feedback}\n    </button>\n  );\n};\n\nconst FeedbackButtons = ({ options, onLeaveFeedback }) => {\n  // return options.map((option) => OneButton({feedback:option,onLeaveFeedback}));\n  return options.map(option => (\n    <OneButton feedback={option} onLeaveFeedback={onLeaveFeedback} />\n  ));\n};\n\nFeedbackButtons.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\nexport default FeedbackButtons;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import PropTypes from 'prop-types';\nimport Notification from '../notification/notification';\nimport s from './statistics.module.css';\n\nconst FeedbackStatistics = ({\n  good,\n  neutral,\n  bad,\n  countTotalFeedback,\n  countPositiveFeedbackPercentage,\n}) => {\n  return (\n    <div>\n      {countTotalFeedback > 0 && (\n        <>\n          <p className={s.good}>\n            Good :<span className={s.good_value}> {good}</span>\n          </p>\n          <p className={s.neutral}>\n            Neutral :<span className={s.neutral_value}> {neutral}</span>\n          </p>\n          <p className={s.bad}>\n            Bad :<span className={s.bad_value}> {bad}</span>\n          </p>\n          <p className={s.total}>\n            Total :<span className={s.total_value}> {countTotalFeedback}</span>\n          </p>\n          <p className={s.positive}>\n            Positive feedback :\n            <span className={s.positive_value}>\n              {' '}\n              {countPositiveFeedbackPercentage}%\n            </span>\n          </p>\n        </>\n      )}\n      {countTotalFeedback === 0 && (\n        <>\n          <Notification message=\"No feedback given\" />\n        </>\n      )}\n    </div>\n  );\n};\n\nFeedbackStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  countTotalFeedback: PropTypes.number.isRequired,\n  countPositiveFeedbackPercentage: PropTypes.number.isRequired,\n};\n\nexport default FeedbackStatistics;\n","const FEEDBACK_OPTIONS = ['good', 'neutral', 'bad'];\nexport default FEEDBACK_OPTIONS;\n","import { Component } from 'react';\nimport Section from './components/section/section';\nimport FeedbackButtons from './components/feedback/feedbackButtons';\nimport FeedbackStatistics from './components/statistics/statistics';\nimport FEEDBACK_OPTIONS from './data/feedbackOptions';\nimport s from './App.module.css';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = ({ target }) => {\n    const { feedback } = target.dataset;\n    this.setState(prevState => ({ [feedback]: prevState[feedback] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    const totalFeedback = good + neutral + bad;\n    return totalFeedback;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const positiveFeedbackPercentage =\n      Math.round((good / this.countTotalFeedback()) * 100) || 0;\n    return positiveFeedbackPercentage;\n  };\n\n  render() {\n    return (\n      <div className={s.App}>\n        <Section title=\"Please leave feedback\">\n          <FeedbackButtons\n            options={FEEDBACK_OPTIONS}\n            onLeaveFeedback={this.handleFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          <FeedbackStatistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            countTotalFeedback={this.countTotalFeedback()}\n            countPositiveFeedbackPercentage={this.countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2sQu6\"};"],"sourceRoot":""}