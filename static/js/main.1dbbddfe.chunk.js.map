{"version":3,"sources":["components/statistics/statistics.module.css","components/section/section.js","components/feedback/feedbackButtons.js","components/notification/notification.js","components/statistics/statistics.js","App.js","reportWebVitals.js","index.js","components/feedback/feedbackButtons.module.css","App.module.css"],"names":["module","exports","Section","title","children","FeedbackButtons","onGood","onNeutral","onBad","className","s","button_wrapper","type","button_good","onClick","button_neutral","button_bad","Notification","message","FeedbackStatistics","good","neutral","bad","countTotalFeedback","countPositiveFeedbackPercentage","good_value","neutral_value","bad_value","total","total_value","positive","positive_value","App","state","goodHandler","setState","prevState","neutralHandler","badHandler","this","Math","round","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1dbbddfe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"good\":\"statistics_good__1pYzx\",\"neutral\":\"statistics_neutral__2aKo-\",\"bad\":\"statistics_bad__2AI1M\",\"total\":\"statistics_total__1Q2zS\",\"positive\":\"statistics_positive__36jv4\"};","import PropTypes from 'prop-types';\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\nimport s from './feedbackButtons.module.css';\n\nconst FeedbackButtons = ({ onGood, onNeutral, onBad }) => {\n  return (\n    <div className={s.button_wrapper}>\n      <button type=\"button\" className={s.button_good} onClick={onGood}>\n        Good\n      </button>\n      <button type=\"button\" className={s.button_neutral} onClick={onNeutral}>\n        Neutral\n      </button>\n      <button type=\"button\" className={s.button_bad} onClick={onBad}>\n        Bad\n      </button>\n    </div>\n  );\n};\n\nFeedbackButtons.propTypes = {\n  onGood: PropTypes.func.isRequired,\n  onNeutral: PropTypes.func.isRequired,\n  onBad: PropTypes.func.isRequired,\n};\nexport default FeedbackButtons;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import PropTypes from 'prop-types';\nimport Notification from '../notification/notification';\nimport s from './statistics.module.css';\n\nconst FeedbackStatistics = ({\n  good,\n  neutral,\n  bad,\n  countTotalFeedback,\n  countPositiveFeedbackPercentage,\n}) => {\n  return (\n    <div>\n      {countTotalFeedback > 0 && (\n        <>\n          <p className={s.good}>\n            Good :<span className={s.good_value}> {good}</span>\n          </p>\n          <p className={s.neutral}>\n            Neutral :<span className={s.neutral_value}> {neutral}</span>\n          </p>\n          <p className={s.bad}>\n            Bad :<span className={s.bad_value}> {bad}</span>\n          </p>\n          <p className={s.total}>\n            Total :<span className={s.total_value}> {countTotalFeedback}</span>\n          </p>\n          <p className={s.positive}>\n            Positive feedback :\n            <span className={s.positive_value}>\n              {' '}\n              {countPositiveFeedbackPercentage}%\n            </span>\n          </p>\n        </>\n      )}\n      {countTotalFeedback === 0 && (\n        <>\n          <Notification message=\"No feedback given\" />\n        </>\n      )}\n    </div>\n  );\n};\n\nFeedbackStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  countTotalFeedback: PropTypes.number.isRequired,\n  countPositiveFeedbackPercentage: PropTypes.number.isRequired,\n};\n\nexport default FeedbackStatistics;\n","import { Component } from 'react';\nimport Section from './components/section/section';\nimport FeedbackButtons from './components/feedback/feedbackButtons';\nimport FeedbackStatistics from './components/statistics/statistics';\nimport s from './App.module.css';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  goodHandler = () => {\n    return this.setState(prevState => ({ good: prevState.good + 1 }));\n  };\n  neutralHandler = () => {\n    return this.setState(prevState => ({ neutral: prevState.neutral + 1 }));\n  };\n  badHandler = () => {\n    return this.setState(prevState => ({ bad: prevState.bad + 1 }));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    function countTotalFeedback() {\n      const totalFeedback = good + neutral + bad;\n      return totalFeedback;\n    }\n    function countPositiveFeedbackPercentage() {\n      const positiveFeedbackPercentage =\n        Math.round((good / countTotalFeedback()) * 100) || 0;\n      return positiveFeedbackPercentage;\n    }\n\n    return (\n      <div className={s.App}>\n        <Section title=\"Please leave feedback\">\n          <FeedbackButtons\n            onGood={this.goodHandler}\n            onNeutral={this.neutralHandler}\n            onBad={this.badHandler}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <FeedbackStatistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            countTotalFeedback={countTotalFeedback()}\n            countPositiveFeedbackPercentage={countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"feedbackButtons_button_wrapper__2zKG0\",\"button_good\":\"feedbackButtons_button_good__psOEW\",\"button_neutral\":\"feedbackButtons_button_neutral__MNWIb\",\"button_bad\":\"feedbackButtons_button_bad__1GlVO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2sQu6\"};"],"sourceRoot":""}